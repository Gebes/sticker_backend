// Code generated by entc, DO NOT EDIT.

package sticker

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the sticker type in the database.
	Label = "sticker"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLocationDescription holds the string denoting the location_description field in the database.
	FieldLocationDescription = "location_description"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldEdition holds the string denoting the edition field in the database.
	FieldEdition = "edition"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the sticker in the database.
	Table = "stickers"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "stickers"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "sticker_owner"
)

// Columns holds all SQL columns for sticker fields.
var Columns = []string{
	FieldID,
	FieldLocationDescription,
	FieldLatitude,
	FieldLongitude,
	FieldEdition,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "stickers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sticker_owner",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// LocationDescriptionValidator is a validator for the "location_description" field. It is called by the builders before save.
	LocationDescriptionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Edition defines the type for the "edition" enum field.
type Edition string

// Edition values.
const (
	EditionOriginal            Edition = "original"
	EditionOriginalWithEarring Edition = "original_with_earring"
	EditionWinter              Edition = "winter"
	EditionTrain               Edition = "train"
	EditionMail                Edition = "mail"
	EditionHoliday             Edition = "holiday"
	EditionOther               Edition = "other"
)

func (e Edition) String() string {
	return string(e)
}

// EditionValidator is a validator for the "edition" field enum values. It is called by the builders before save.
func EditionValidator(e Edition) error {
	switch e {
	case EditionOriginal, EditionOriginalWithEarring, EditionWinter, EditionTrain, EditionMail, EditionHoliday, EditionOther:
		return nil
	default:
		return fmt.Errorf("sticker: invalid enum value for edition field: %q", e)
	}
}
